(program

  (module CraftOfFP
    (import Prelude)
    (export ()
      (
        testZexOrsZ1
        testZexOrsZ2
        testZexOrsZ3
        testZexOrsZ4
      )
    )

    (declare exOr (fun (con Prelude.Bool)
                    (fun (con Prelude.Bool)
                         (con Prelude.Bool))))
    (define exOr (lam x (lam y
      [Prelude.and [Prelude.or x y] [Prelude.not [Prelude.and x y]]])))


    (declare exOr1 (fun (con Prelude.Bool)
                     (fun (con Prelude.Bool)
                          (con Prelude.Bool))))
    (define exOr1 (lam x (lam y
      (case x
        (Prelude.True () [Prelude.not y])
        (Prelude.False () y)))))


    (declare propZexOrs (fun (con Prelude.Bool)
                          (fun (con Prelude.Bool)
                               (con Prelude.Bool))))
    (define propZexOrs (lam x (lam y
      [Prelude.equalsBool [CraftOfFP.exOr x y] [CraftOfFP.exOr1 x y]])))


    (declare testZexOrsZ1 (fun (con Prelude.Unit) (con Prelude.Bool)))
    (define testZexOrsZ1 (lam x
      [CraftOfFP.propZexOrs (con Prelude.True) (con Prelude.True)]))

    (declare testZexOrsZ2 (fun (con Prelude.Unit) (con Prelude.Bool)))
    (define testZexOrsZ2 (lam x
      [CraftOfFP.propZexOrs (con Prelude.True) (con Prelude.False)]))

    (declare testZexOrsZ3 (fun (con Prelude.Unit) (con Prelude.Bool)))
    (define testZexOrsZ3 (lam x
      [CraftOfFP.propZexOrs (con Prelude.False) (con Prelude.True)]))

    (declare testZexOrsZ4 (fun (con Prelude.Unit) (con Prelude.Bool)))
    (define testZexOrsZ4 (lam x
      [CraftOfFP.propZexOrs (con Prelude.False) (con Prelude.False)]))
  )
)

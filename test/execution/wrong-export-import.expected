<T>
  <k> ( Foo . r1 ) ~> #freezer(builtin___)1 ( equalsInteger , 2 ) ~> #freezer(define__)0 ( r7 ) ~> .DecList ~> ( program .ModList ) </k>
  <lenv> .Map </lenv>
  <genv> ( Foo . r5 ) |-> ( con Prelude . True .ValList ) ( Foo . r2 ) |-> ( con Prelude . False .ValList ) ( Foo . r1 ) |-> 2 ( Foo . r6 ) |-> ( con Prelude . False .ValList ) </genv>
  <modules>
    <module>
      <curr> 1 </curr>
      <name> Bar </name>
      <data> .TyExpList </data>
      <decl> .NameList </decl>
      <import> Foo  .ModNmList </import>
      <exportTy> .TyExpList </exportTy>
      <exportTm> .NameList </exportTm>
    </module>
    <module>
      <curr> 0 </curr>
      <name> Foo </name>
      <data> .TyExpList </data>
      <decl> r1  .NameList </decl>
      <import> .ModNmList </import>
      <exportTy> .TyExpList </exportTy>
      <exportTm> r2  .NameList </exportTm>
    </module>
  </modules>
</T>

(program

(module Foo (import) (export () ())
  (define result
    (case (con Prelude.MkPair (con Prelude.MkPair 1 2) (con Prelude.MkPair 3 4))
          (Prelude.NotThis ()  -1)
          (Prelude.MkPair (p1 p2)
            (case p2
              (Prelude.NotThis (x) -2)
              (Prelude.MkPair (x y) (builtin multiplyInteger x y))
              (Prelude.NotThisEither (x) -2)))))

)

)

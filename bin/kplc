#!/usr/bin/env python

from __future__ import print_function
from argparse import ArgumentParser, REMAINDER
import os
import subprocess
import sys

_base = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
def base(*args)     : return os.path.join(_base, *args)
def bin(*args)      : return base('bin', *args)
def build(*args)    : return base('.build', *args)

# Runners
# -------

def run_krun(driver, file, *args): 
    os.environ['K_OPTS'] = '-Xss500m'
    print('krun',  '--directory', build(driver), file, *args, file=sys.stderr)
    os.execlp('krun',  'krun', '--directory', build(driver), file, *args)

def run_kprove(driver, spec, init, *args):
    os.stat(spec)
    os.stat(init)
    os.environ['K_OPTS'] = '-Xmx2G'
    os.execlp('krun',  'krun', '--directory', build(driver), '--z3-executable', init, '--prove', spec, *args)

# Main
# ----

def main():
    argparser = ArgumentParser(description='krun a Plutus Core program')
    subparsers = argparser.add_subparsers(dest='subparser')
    run = subparsers.add_parser('run', help='Run a Plutus Program using a particular kompiled definition')
    run.add_argument('driver',  help='kompiled definition to use in `.build`')
    run.add_argument('program', help='Plutus Core program')
    run.add_argument('args',    nargs=REMAINDER, help='additional arguments to pass to `krun`')

    prove = subparsers.add_parser('prove', help='Check a Plutus Program against a reachability specification')
    prove.add_argument('driver' , help='kompiled definition to use in `.build`')
    prove.add_argument('spec'   , help='reachability spec')
    prove.add_argument('program', help='Plutus Core program')
    prove.add_argument('args',    nargs=REMAINDER, help='additional arguments to pass to `krun`')

    args = argparser.parse_args()
    if args.subparser == 'run':
        run_krun(args.driver,            args.program, *args.args)
    elif args.subparser == 'prove':
        run_krun(args.driver, args.spec, args.program, *args.args)

if __name__ == '__main__':
    main()
